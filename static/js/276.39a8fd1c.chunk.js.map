{"version":3,"file":"static/js/276.39a8fd1c.chunk.js","mappings":"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","sources":["components/common/FormControls/FormControls.jsx","webpack://magazine/./src/components/common/FormControls/FormControls.module.css?7a3d","webpack://magazine/./src/components/Pages/AdminPage/AdminPanelMainPart/Form.module.css?a219","components/Pages/AdminPage/AdminPanelMainPart/NewProductForm/NewProductForm.jsx","components/Pages/AdminPage/AdminPanelMainPart/NewProductForm/NewProductFormContainer.jsx","components/Pages/AdminPage/AdminPanelMainPart/DeleteProductForm/DeleteProductForm.jsx","components/Pages/AdminPage/AdminPanelMainPart/DeleteProductForm/DeleteProductFormContainer.jsx","components/Pages/AdminPage/AdminPanelMainPart/UpdateProductForm/UpdateProductForm.jsx","components/Pages/AdminPage/AdminPanelMainPart/UpdateProductForm/UpdateProductFormContainer.jsx","components/Pages/AdminPage/AdminPanelMainPart/AdminPanelMainPart.jsx","pages/AdminPanel.jsx","utils/readFile.js","utils/validators/validators.js"],"sourcesContent":["import React from 'react';\r\nimport classes from './FormControls.module.css';\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    const showError = meta.error && meta.touched;\r\n    return (\r\n        <div className={ classes.formControl + \" \" + (showError ? classes.error : '') }>\r\n            <textarea {...input} {...props}></textarea>\r\n            { showError && <p className={ classes.errorMessage }>{ meta.error }</p> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    const showError = meta.error && meta.touched;\r\n\r\n    return (\r\n        <div className={ classes.formControl + ' ' + (showError ? classes.error : '') }>\r\n            <input type={ props.type } className={ classes.input } {...input} {...props} />\r\n            { showError && <p className={ classes.errorMessage }>{ meta.error }</p> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const FileInput = ({input, meta, ...props}) => {\r\n    const showError = meta.error && meta.touched;\r\n    return (\r\n        <div className={ classes.formControl + ' ' + (showError ? classes.error : '') }>\r\n            <input \r\n                type={ props.type } \r\n                onChange={(event) => input.onChange(event.target.files[0]) }\r\n                className={ classes.input } \r\n                {...props} \r\n            />\r\n        </div>     \r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__neQaL\",\"error\":\"FormControls_error__7Upak\",\"formSummaryError\":\"FormControls_formSummaryError__llVHA\",\"input\":\"FormControls_input__8UP1w\",\"errorMessage\":\"FormControls_errorMessage__prxIH\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__CD8mp\",\"redStar\":\"Form_redStar__IIhxZ\",\"button\":\"Form_button__oq9Y4\",\"textarea\":\"Form_textarea__FAq1N\"};","import { Field, reduxForm } from \"redux-form\";\r\nimport { FileInput, Input, Textarea } from \"../../../../common/FormControls/FormControls\";\r\nimport { minValue, requiredField } from \"../../../../../utils/validators/validators\";\r\nimport classes from './../Form.module.css';\r\nimport { categories } from \"../../../../../config/sort\";\r\nimport { formTextareaBaseStyle } from \"../AdminPanelMainPart\";\r\n\r\nconst NewProductForm = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form action=\"\" onSubmit={ handleSubmit } className={ classes.form }>\r\n            <h2>Форма добавления товара</h2>\r\n            <label htmlFor=\"title\">Название <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='title'\r\n                name='title'\r\n                component={ Input }\r\n                validate={[ requiredField ]}\r\n            />\r\n            <label htmlFor=\"price\">Цена <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='price'\r\n                name='price'\r\n                component={ Input }\r\n                validate={[ requiredField, minValue ]}\r\n            />\r\n            <label htmlFor=\"status\">Статус</label>\r\n            <Field \r\n                id='status'\r\n                name='status'\r\n                component={ Input }\r\n            />\r\n            <label htmlFor=\"category\">Категория <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='category'\r\n                name='category'\r\n                list='categories'\r\n                component={ Input }\r\n                validate={[ requiredField ]}\r\n            />\r\n            <datalist id=\"categories\">\r\n                { categories.map(category => <option value={category.value} key={ category.id }></option>) }\r\n            </datalist>\r\n            <label htmlFor=\"description\">Описание <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='description'\r\n                name='description'\r\n                component={ Textarea }\r\n                validate={[ requiredField ]}\r\n                style={ formTextareaBaseStyle }\r\n            />\r\n            <label htmlFor=\"compound\">Состав <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='compound'\r\n                name='compound'\r\n                component={ Textarea }\r\n                validate={[ requiredField ]}\r\n                style={ formTextareaBaseStyle }\r\n            />\r\n            <label htmlFor=\"photo\">Фотография </label>\r\n            <Field \r\n                id='photo'\r\n                name='photo'\r\n                type=\"file\"\r\n                component={ FileInput }\r\n            />\r\n            <button className={ classes.button }>Добавить</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: 'newProduct' })(NewProductForm);","import { connect } from \"react-redux\";\r\nimport { addProduct } from \"../../../../../redux/products/productsThunks\";\r\nimport NewProductForm from \"./NewProductForm\";\r\nimport readFile from './../../../../../utils/readFile';\r\n\r\nconst NewProductFormContainer = ({ addProduct }) => {\r\n    const onSubmit = async({ title, price, status = '', category, description, compound, photo}) => {\r\n        let img_path;\r\n        if (photo) {\r\n            img_path = await readFile (photo);\r\n            img_path = img_path.split(',')[1];\r\n        }\r\n        addProduct({title, price, status, category, description, compound, img_path});\r\n    }\r\n    return (\r\n        <NewProductForm onSubmit={ onSubmit } />\r\n    )\r\n};\r\n\r\nexport default connect(null, { addProduct })(NewProductFormContainer);","import { Field, reduxForm } from \"redux-form\";\r\nimport { Input } from \"../../../../common/FormControls/FormControls\";\r\nimport { requiredField } from \"../../../../../utils/validators/validators\";\r\nimport classes from './../Form.module.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport { productsAPI } from \"../../../../../api/api\";\r\n\r\nconst DeleteProductForm = ({ handleSubmit, error }) => {\r\n    const [allProducts, setAllProducts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getProducts() {\r\n            let response = await productsAPI.getAllProducts();\r\n            setAllProducts(response);\r\n        }\r\n        getProducts();\r\n    }, []);\r\n\r\n    return (\r\n        <form action=\"\" onSubmit={ handleSubmit } className={ classes.form }>\r\n            <h2>Форма удаления товара</h2>\r\n            <label htmlFor=\"title\">Название <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='title'\r\n                name='title'\r\n                list=\"products\"\r\n                component={ Input }\r\n                validate={[ requiredField ]}\r\n            />\r\n            <datalist name=\"products\" id=\"products\">\r\n                {   \r\n                    allProducts.map(product => (\r\n                        <option key={product.id} value={product.title} />\r\n                    ))\r\n                }\r\n            </datalist>\r\n            <button className={ classes.button }>Удалить</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: 'deleteProduct' })(DeleteProductForm);","import { connect } from \"react-redux\";\r\nimport { deleteProduct } from \"../../../../../redux/products/productsThunks\";\r\nimport DeleteProductForm from \"./DeleteProductForm\";\r\n\r\nconst DeleteProductFormContainer = ({ deleteProduct }) => {\r\n    const onSubmit = ({ title }) => {\r\n        deleteProduct(title);\r\n    }\r\n    return (\r\n        <DeleteProductForm onSubmit={ onSubmit } />\r\n    )\r\n};\r\n\r\nexport default connect(null, { deleteProduct })(DeleteProductFormContainer);","import { Field, reduxForm } from \"redux-form\";\r\nimport { FileInput, Input, Textarea } from \"../../../../common/FormControls/FormControls\";\r\nimport { minValue, requiredField } from \"../../../../../utils/validators/validators\";\r\nimport classes from './../Form.module.css';\r\nimport { formTextareaBaseStyle } from './../AdminPanelMainPart';\r\nimport { useEffect, useState } from \"react\";\r\nimport { productsAPI } from \"../../../../../api/api\";\r\nimport { categories } from \"../../../../../config/sort\";\r\n\r\nconst UpdateProductForm = ({ handleSubmit, error }) => {\r\n    const [allProducts, setAllProducts] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        async function getProducts() {\r\n            let response = await productsAPI.getAllProducts();\r\n            setAllProducts(response);\r\n        }\r\n        getProducts();\r\n    }, []);\r\n\r\n    return (\r\n        <form action=\"\" onSubmit={ handleSubmit } className={ classes.form }>\r\n            <h2>Форма редактирования товара</h2>\r\n            <label htmlFor=\"selected\">Выберите редактируемый товар <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='selected'\r\n                name='selected'\r\n                list='products'\r\n                component={ Input }\r\n                validate={[ requiredField ]}\r\n            />\r\n            <datalist id='products'>\r\n                { allProducts.map(product => <option value={ product.title }></option>)}\r\n            </datalist>\r\n            <label htmlFor=\"title\">Новое название <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='title'\r\n                name='title'\r\n                component={ Input }\r\n                validate={[ requiredField ]}\r\n            />\r\n            <label htmlFor=\"price\">Цена <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='price'\r\n                name='price'\r\n                type=\"number\"\r\n                component={ Input }\r\n                validate={[ requiredField, minValue ]}\r\n            />\r\n            <label htmlFor=\"status\">Статус</label>\r\n            <Field \r\n                id='status'\r\n                name='status'\r\n                component={ Input }\r\n            />\r\n            <label htmlFor=\"category\">Категория <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='category'\r\n                name='category'\r\n                list=\"categories\"\r\n                component={ Input }\r\n                validate={[ requiredField ]}\r\n            />\r\n            <datalist id=\"categories\">\r\n                { categories.map(category => <option value={category.value} key={ category.id }></option>) }\r\n            </datalist>\r\n            <label htmlFor=\"description\">Описание <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='description'\r\n                name='description'\r\n                component={ Textarea }\r\n                validate={[ requiredField ]}\r\n                style={ formTextareaBaseStyle }\r\n            />\r\n            <label htmlFor=\"compound\">Состав <span className={ classes.redStar }>*</span></label>\r\n            <Field \r\n                id='compound'\r\n                name='compound'\r\n                component={ Textarea }\r\n                validate={[ requiredField ]}\r\n                style={ formTextareaBaseStyle }\r\n            />\r\n            <label htmlFor=\"photo\">Фотография </label>\r\n            <Field \r\n                id='photo'\r\n                name='photo'\r\n                type=\"file\"\r\n                component={ FileInput }\r\n            />\r\n            <button className={ classes.button }>Сохранить</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: 'updateProduct' })(UpdateProductForm);","import UpdateProductForm from \"./UpdateProductForm\"\r\nimport { connect } from \"react-redux\";\r\nimport { updateProduct } from \"../../../../../redux/products/productsThunks\";\r\nimport readFile from \"../../../../../utils/readFile\";\r\n\r\nconst UpdateProductFormContainer = ({ updateProduct }) => {\r\n    const onSubmit = async({selected, title, photo, price, status, description, compound, category}) => {\r\n        let img_path;\r\n        if (photo) {\r\n            img_path = await readFile(photo);\r\n            img_path = img_path.split(',')[1];\r\n        }\r\n        console.log( 1 );\r\n        debugger;\r\n        updateProduct({ selected, title, img_path, price, status, description, compound, category });\r\n        console.log( 3 );\r\n    }\r\n    return (\r\n        <UpdateProductForm onSubmit={ onSubmit } />\r\n    )\r\n};\r\n\r\nexport default connect(null, { updateProduct })(UpdateProductFormContainer);","import NewProductFormContainer from './NewProductForm/NewProductFormContainer';\r\nimport DeleteProductFormContainer from './DeleteProductForm/DeleteProductFormContainer';\r\nimport UpdateProductFormContainer from './UpdateProductForm/UpdateProductFormContainer';\r\n\r\nexport const formTextareaBaseStyle = {\r\n    width: '300px',\r\n    padding: '0.5em 1em',\r\n\r\n    border: 'none',\r\n    outline: 'none',\r\n\r\n    backgroundColor: 'var(--medium-gray)',\r\n}\r\n\r\nconst AdminPanelMainPart = () => {\r\n    return (\r\n        <section className='container'>\r\n            <NewProductFormContainer />\r\n            <DeleteProductFormContainer />\r\n            <UpdateProductFormContainer />\r\n        </section>\r\n    )\r\n};\r\n\r\nexport default AdminPanelMainPart;","import HeaderContainer from '../components/common/Header/HeaderContainer';\r\nimport FooterContainer from '../components/common/Footer/FooterContainer';\r\nimport AdminPanelMainPart from '../components/Pages/AdminPage/AdminPanelMainPart/AdminPanelMainPart';\r\nimport { getIsAdmin } from '../redux/auth/authSelectors';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nconst AdminPanel = ({ isAdmin }) => {\r\n    return (\r\n        isAdmin\r\n        ?\r\n        <div>\r\n            <HeaderContainer />\r\n            <AdminPanelMainPart />\r\n            <FooterContainer />\r\n        </div>\r\n        :\r\n        <Navigate to={ '/' } />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAdmin: getIsAdmin(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AdminPanel);","function readFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = () => {\r\n            resolve(reader.result);\r\n        };\r\n\r\n        reader.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\nexport default readFile;\r\n","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Поле обязательное';\r\n};\r\n\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n    if (value && value.length < minLength) {\r\n        return `Минимальная длина: ${minLength} символов`;\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length < maxLength) {\r\n        return `Максимальная длина: ${maxLength} символов`;\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const minValue = value => {\r\n    if (value && value <= 0) {\r\n        return 'Манимальное значение: 1';\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const correctPassword = value => {\r\n    let passwordRegex = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\r\n    if (passwordRegex.test(value)) {\r\n        return undefined;\r\n    }\r\n    else {\r\n        return 'Пароль должен содержать 1 цифру, 1 строчную и 1 заглавную латинскую букву, а также специальный символ из набора \"#?!@$%^&*-\"';\r\n    }\r\n};\r\n"],"names":["Textarea","_ref","input","meta","props","showError","error","touched","_jsxs","className","classes","formControl","children","_jsx","errorMessage","Input","_ref2","type","FileInput","_ref3","onChange","event","target","files","reduxForm","form","handleSubmit","action","onSubmit","htmlFor","Field","id","name","component","validate","requiredField","minValue","list","categories","map","category","value","style","formTextareaBaseStyle","connect","addProduct","NewProductForm","async","img_path","title","price","status","description","compound","photo","readFile","split","allProducts","setAllProducts","useState","useEffect","response","productsAPI","getAllProducts","getProducts","product","deleteProduct","DeleteProductForm","updateProduct","UpdateProductForm","selected","console","log","width","padding","border","outline","backgroundColor","AdminPanelMainPart","NewProductFormContainer","DeleteProductFormContainer","UpdateProductFormContainer","state","isAdmin","getIsAdmin","HeaderContainer","FooterContainer","Navigate","to","file","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","minLengthCreator","minLength","length","correctPassword","test"],"sourceRoot":""}