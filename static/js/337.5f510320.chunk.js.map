{"version":3,"file":"static/js/337.5f510320.chunk.js","mappings":"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","sources":["components/common/FormControls/FormControls.jsx","redux/app/appSelectors.js","components/Pages/RegistrationPage/RegistrationForm.jsx","utils/readFile.js","components/Pages/RegistrationPage/RegistrationFormContainer.jsx","pages/Registration.jsx","webpack://magazine/./src/components/common/FormControls/FormControls.module.css?7a3d","webpack://magazine/./src/components/common/FormControls/Form.module.css?ffe9","utils/validators/validators.js"],"sourcesContent":["import React from 'react';\r\nimport classes from './FormControls.module.css';\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    const showError = meta.error && meta.touched;\r\n    return (\r\n        <div className={ classes.formControl + \" \" + (showError ? classes.error : '') }>\r\n            <textarea {...input} {...props}></textarea>\r\n            { showError && <span>Ошибка</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    const showError = meta.error && meta.touched;\r\n\r\n    return (\r\n        <div className={ classes.formControl + ' ' + (showError ? classes.error : '') }>\r\n            <input type={ props.type } className={ classes.input } {...input} {...props} />\r\n            { showError && <p className={ classes.errorMessage }>{ meta.error }</p> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const FileInput = ({input, meta, ...props}) => {\r\n    const showError = meta.error && meta.touched;\r\n    return (\r\n        <div className={ classes.formControl + ' ' + (showError ? classes.error : '') }>\r\n            <input \r\n                type={ props.type } \r\n                onChange={(event) => input.onChange(event.target.files[0]) }\r\n                className={ classes.input } \r\n                {...props} \r\n            />\r\n        </div>     \r\n    )\r\n}","export const getLastPage = (state) => {\r\n    return state.app.lastPage;\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { correctPassword, minLengthCreator, requiredField } from './../../../utils/validators/validators';\r\nimport { FileInput, Input } from './../../common/FormControls/FormControls';\r\nimport classes from './../../common/FormControls/Form.module.css';\r\nimport styles from './../../../components/common/FormControls/FormControls.module.css';\r\n\r\nconst RegistrationForm = ({ handleSubmit, error, isAuth, lastPage, selectedImg, img, setImage }) => {\r\n    let minLength8 = minLengthCreator(8);\r\n    return (\r\n        <div className={ classes.form }>\r\n            <div className={ classes.left }>\r\n                <h2 className={ classes.formPartTitle }>Авторизация</h2>\r\n                <p>Есть аккаунт?</p>\r\n                <NavLink to={'/login'} className={ classes.link }>Войти</NavLink>\r\n            </div>\r\n            <div>\r\n                <h2 className={ classes.formPartTitle }>Регистрация</h2>\r\n                { error && <div className={ styles.formSummaryError }>\r\n                    { error }\r\n                </div> }\r\n                <form action=\"\" method='get' className={ classes.items } onSubmit={ handleSubmit }>\r\n                    <label htmlFor='surname'>Фамилия <span className={ classes.redStar }>*</span></label>\r\n                    <Field \r\n                        type='text'\r\n                        name='surname'\r\n                        id='surname'\r\n                        component={ Input }\r\n                        validate={ [requiredField] }\r\n                    />\r\n                    <label htmlFor='name'>Имя <span className={ classes.redStar }>*</span></label>\r\n                    <Field \r\n                        type='text'\r\n                        name='name'\r\n                        id='name'\r\n                        component={ Input }\r\n                        validate={ [requiredField] }\r\n                    />\r\n                    <label htmlFor='login'>Отчество</label>\r\n                    <Field \r\n                        type='text'\r\n                        name='patronymic'\r\n                        id='patronymic'\r\n                        component={ Input }\r\n                    />\r\n                    <label htmlFor='login'>Логин <span className={ classes.redStar }>*</span></label>\r\n                    <Field \r\n                        type='text'\r\n                        name='login'\r\n                        id='login'\r\n                        component={ Input }\r\n                        validate={ [requiredField, minLength8] }\r\n                    />\r\n                    <label htmlFor='password'>Пароль <span className={ classes.redStar }>*</span></label>\r\n                    <Field \r\n                        type='password'\r\n                        name='password'\r\n                        id='password'\r\n                        component={ Input }\r\n                        validate={ [requiredField, minLength8, correctPassword] }\r\n                    />\r\n                    <label htmlFor='photo'>Фото <span className={ classes.redStar }>*</span></label>\r\n                    <div>\r\n                        <Field \r\n                            type='file'\r\n                            name='photo'\r\n                            id='photo'\r\n                            component={ FileInput }\r\n                        />\r\n                    </div>\r\n                    <button className={ classes.button }>Зарегистрироваться</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default reduxForm({ form: 'registration' })(RegistrationForm);","function readFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = () => {\r\n            resolve(reader.result);\r\n        };\r\n\r\n        reader.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\nexport default readFile;\r\n","import { connect } from \"react-redux\";\r\nimport RegistrationForm from \"./RegistrationForm\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { registration } from \"../../../redux/auth/authThunks\";\r\nimport { getIsAuth } from './../../../redux/auth/authSelectors';\r\nimport { getLastPage } from './../../../redux/app/appSelectors';\r\nimport readFile from \"../../../utils/readFile\";\r\n\r\nconst RegistrationFormContainer = (props) => {\r\n    let { isAuth, lastPage, registration, ...other } = {...props};\r\n    const onSubmit = async(formData) => {\r\n        let img = await readFile(formData.photo);\r\n        let { surname, name, patronymic, login, password } = { ...formData };\r\n        img = img.split(',')[1];\r\n        registration(surname, name, patronymic, login, password, img);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isAuth\r\n                ?\r\n                <Navigate to={ lastPage } />\r\n                :\r\n                <RegistrationForm {...other} onSubmit={ onSubmit }/>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: getIsAuth(state),\r\n        lastPage: getLastPage(state)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { registration })(RegistrationFormContainer);","import RegistrationFormContainer from \"../components/Pages/RegistrationPage/RegistrationFormContainer\";\r\n\r\nconst Registration = () => {\r\n    return (\r\n        <RegistrationFormContainer />\r\n    )\r\n};\r\n\r\nexport default Registration;","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__neQaL\",\"error\":\"FormControls_error__7Upak\",\"formSummaryError\":\"FormControls_formSummaryError__llVHA\",\"input\":\"FormControls_input__8UP1w\",\"errorMessage\":\"FormControls_errorMessage__prxIH\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__ptw1s\",\"left\":\"Form_left__CsMML\",\"formPartTitle\":\"Form_formPartTitle__jH+an\",\"items\":\"Form_items__Sj6q0\",\"button\":\"Form_button__jgbHS\",\"redStar\":\"Form_redStar__6bUfV\",\"link\":\"Form_link__IjlKl\",\"selectedImg\":\"Form_selectedImg__g2IST\"};","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Поле обязательное';\r\n};\r\n\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n    if (value && value.length < minLength) {\r\n        return `Минимальная длина: ${minLength} символов`;\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length < maxLength) {\r\n        return `Максимальная длина: ${maxLength} символов`;\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const correctPassword = value => {\r\n    let passwordRegex = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\r\n    if (passwordRegex.test(value)) {\r\n        return undefined;\r\n    }\r\n    else {\r\n        return 'Пароль должен содержать 1 цифру, 1 строчную и 1 заглавную латинскую букву, а также специальный символ из набора \"#?!@$%^&*-\"';\r\n    }\r\n};\r\n"],"names":["Input","_ref2","input","meta","props","showError","error","touched","_jsxs","className","classes","formControl","children","_jsx","type","errorMessage","FileInput","_ref3","onChange","event","target","files","getLastPage","state","app","lastPage","reduxForm","form","_ref","handleSubmit","isAuth","selectedImg","img","setImage","minLength8","minLengthCreator","left","formPartTitle","NavLink","to","link","styles","formSummaryError","action","method","items","onSubmit","htmlFor","redStar","Field","name","id","component","validate","requiredField","correctPassword","button","file","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","connect","getIsAuth","registration","other","_Fragment","Navigate","RegistrationForm","async","readFile","formData","photo","surname","patronymic","login","password","split","Registration","RegistrationFormContainer","value","minLength","length","test"],"sourceRoot":""}