{"version":3,"file":"static/js/337.e8a55c5d.chunk.js","mappings":"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","sources":["components/common/FormControls/FormControls.jsx","redux/app/appSelectors.js","components/Pages/RegistrationPage/RegistrationForm.jsx","utils/readFile.js","components/Pages/RegistrationPage/RegistrationFormContainer.jsx","pages/Registration.jsx","webpack://magazine/./src/components/common/FormControls/FormControls.module.css?7a3d","webpack://magazine/./src/components/common/FormControls/Form.module.css?ffe9","utils/validators/validators.js"],"sourcesContent":["import React from 'react';\r\nimport classes from './FormControls.module.css';\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    const showError = meta.error && meta.touched;\r\n    return (\r\n        <div className={ classes.formControl + \" \" + (showError ? classes.error : '') }>\r\n            <textarea {...input} {...props}></textarea>\r\n            { showError && <span>Ошибка</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    const showError = meta.error && meta.touched;\r\n\r\n    return (\r\n        <div className={ classes.formControl + ' ' + (showError ? classes.error : '') }>\r\n            <input type={ props.type } className={ classes.input } {...input} {...props} />\r\n            { showError && <p className={ classes.errorMessage }>{ meta.error }</p> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const FileInput = ({input, meta, ...props}) => {\r\n    const showError = meta.error && meta.touched;\r\n    return (\r\n        <div className={ classes.formControl + ' ' + (showError ? classes.error : '') }>\r\n            <input \r\n                type={ props.type } \r\n                onChange={(event) => input.onChange(event.target.files[0]) }\r\n                className={ classes.input } \r\n                {...props} \r\n            />\r\n        </div>     \r\n    )\r\n}","export const getLastPage = (state) => {\r\n    return state.app.lastPage;\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { correctPassword, minLengthCreator, requiredField } from './../../../utils/validators/validators';\r\nimport { FileInput, Input } from './../../common/FormControls/FormControls';\r\nimport classes from './../../common/FormControls/Form.module.css';\r\nimport styles from './../../../components/common/FormControls/FormControls.module.css';\r\n\r\nconst RegistrationForm = ({ handleSubmit, error }) => {\r\n    let minLength8 = minLengthCreator(8);\r\n    return (\r\n        <div className={ classes.form }>\r\n            <div className={ classes.left }>\r\n                <h2 className={ classes.formPartTitle }>Авторизация</h2>\r\n                <p>Есть аккаунт?</p>\r\n                <NavLink to={'/login'} className={ classes.link }>Войти</NavLink>\r\n            </div>\r\n            <div>\r\n                <h2 className={ classes.formPartTitle }>Регистрация</h2>\r\n                { error && <div className={ styles.formSummaryError }>\r\n                    { error }\r\n                </div> }\r\n                <form action=\"\" method='get' className={ classes.items } onSubmit={ handleSubmit }>\r\n                    <label htmlFor='surname'>Фамилия <span className={ classes.redStar }>*</span></label>\r\n                    <Field \r\n                        type='text'\r\n                        name='surname'\r\n                        id='surname'\r\n                        component={ Input }\r\n                        validate={ [requiredField] }\r\n                    />\r\n                    <label htmlFor='name'>Имя <span className={ classes.redStar }>*</span></label>\r\n                    <Field \r\n                        type='text'\r\n                        name='name'\r\n                        id='name'\r\n                        component={ Input }\r\n                        validate={ [requiredField] }\r\n                    />\r\n                    <label htmlFor='login'>Отчество</label>\r\n                    <Field \r\n                        type='text'\r\n                        name='patronymic'\r\n                        id='patronymic'\r\n                        component={ Input }\r\n                    />\r\n                    <label htmlFor='login'>Логин <span className={ classes.redStar }>*</span></label>\r\n                    <Field \r\n                        type='text'\r\n                        name='login'\r\n                        id='login'\r\n                        component={ Input }\r\n                        validate={ [requiredField, minLength8] }\r\n                    />\r\n                    <label htmlFor='password'>Пароль <span className={ classes.redStar }>*</span></label>\r\n                    <Field \r\n                        type='password'\r\n                        name='password'\r\n                        id='password'\r\n                        component={ Input }\r\n                        validate={ [requiredField, minLength8, correctPassword] }\r\n                    />\r\n                    <label htmlFor='photo'>Фото</label>\r\n                    <div>\r\n                        <Field \r\n                            type='file'\r\n                            name='photo'\r\n                            id='photo'\r\n                            component={ FileInput }\r\n                        />\r\n                    </div>\r\n                    <button className={ classes.button }>Зарегистрироваться</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default reduxForm({ form: 'registration' })(RegistrationForm);","function readFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = () => {\r\n            resolve(reader.result);\r\n        };\r\n\r\n        reader.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\nexport default readFile;\r\n","import { connect } from \"react-redux\";\r\nimport RegistrationForm from \"./RegistrationForm\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { registration } from \"../../../redux/auth/authThunks\";\r\nimport { getIsAuth } from './../../../redux/auth/authSelectors';\r\nimport { getLastPage } from './../../../redux/app/appSelectors';\r\nimport readFile from \"../../../utils/readFile\";\r\n\r\nconst RegistrationFormContainer = ({ isAuth, registration, lastPage, ...other }) => {\r\n    const onSubmit = async({ surname, name, patronymic, login, password, photo }) => {\r\n        let img;\r\n        if (photo) {\r\n            img = await readFile(photo);\r\n            img = img.split(',')[1];\r\n        }\r\n        registration(surname, name, patronymic, login, password, img);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isAuth\r\n                ?\r\n                <Navigate to={ lastPage } />\r\n                :\r\n                <RegistrationForm {...other} onSubmit={ onSubmit }/>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: getIsAuth(state),\r\n        lastPage: getLastPage(state)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { registration })(RegistrationFormContainer);","import RegistrationFormContainer from \"../components/Pages/RegistrationPage/RegistrationFormContainer\";\r\n\r\nconst Registration = () => {\r\n    return (\r\n        <RegistrationFormContainer />\r\n    )\r\n};\r\n\r\nexport default Registration;","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__neQaL\",\"error\":\"FormControls_error__7Upak\",\"formSummaryError\":\"FormControls_formSummaryError__llVHA\",\"input\":\"FormControls_input__8UP1w\",\"errorMessage\":\"FormControls_errorMessage__prxIH\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__ptw1s\",\"left\":\"Form_left__CsMML\",\"formPartTitle\":\"Form_formPartTitle__jH+an\",\"items\":\"Form_items__Sj6q0\",\"button\":\"Form_button__jgbHS\",\"redStar\":\"Form_redStar__6bUfV\",\"link\":\"Form_link__IjlKl\",\"selectedImg\":\"Form_selectedImg__g2IST\"};","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Поле обязательное';\r\n};\r\n\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n    if (value && value.length < minLength) {\r\n        return `Минимальная длина: ${minLength} символов`;\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length < maxLength) {\r\n        return `Максимальная длина: ${maxLength} символов`;\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const correctPassword = value => {\r\n    let passwordRegex = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\r\n    if (passwordRegex.test(value)) {\r\n        return undefined;\r\n    }\r\n    else {\r\n        return 'Пароль должен содержать 1 цифру, 1 строчную и 1 заглавную латинскую букву, а также специальный символ из набора \"#?!@$%^&*-\"';\r\n    }\r\n};\r\n"],"names":["Textarea","_ref","input","meta","props","showError","error","touched","_jsxs","className","classes","formControl","children","_jsx","Input","_ref2","type","errorMessage","FileInput","_ref3","onChange","event","target","files","getLastPage","state","app","lastPage","reduxForm","form","handleSubmit","minLength8","minLengthCreator","left","formPartTitle","NavLink","to","link","styles","formSummaryError","action","method","items","onSubmit","htmlFor","redStar","Field","name","id","component","validate","requiredField","correctPassword","button","file","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","connect","isAuth","getIsAuth","registration","other","_Fragment","Navigate","RegistrationForm","async","img","surname","patronymic","login","password","photo","readFile","split","Registration","RegistrationFormContainer","value","minLength","length","test"],"sourceRoot":""}